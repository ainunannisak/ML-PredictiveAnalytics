# -*- coding: utf-8 -*-
"""Submission-Belajar Machine Learning Terapan

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nR2Wp41ipurGwP_VqWsjsEAsu4Rq3w2S

# Submission 1 - Predictive Analysis

##Walmart Sales Prediction

Nama    : Ainun Annisa K

Dataset : [Walmart Dataset](https://www.kaggle.com/datasets/yasserh/walmart-dataset)

### Domain Project

Memprediksi permintaan suatu produk dan menyimpannya sesuai kebutuhan dimasa yang akan datang merupakan hal penting dalam penjualan bisnis supermarket. Dengan prediksi yang akurat, dapat dicapai retensi pelanggan yang lebih baik, kepuasan pelanggan, dan menghindari situasi stok berlebihan dan kekurangan stok [[1]](https://ijcrt.org/papers/IJCRT22A6470.pdf).

Salah satu toko ritel terkemuka di Amerika Serikat, yaitu Walmart, ingin memprediksi penjualan dan permintaan dengan akurat. Ada beberapa acara dan hari libur yang mempengaruhi penjualan setiap harinya [[2]](https://www.kaggle.com/code/yasserh/walmart-sales-prediction-best-ml-algorithms). Pada project ini, akan dilakukan prediksi Machine Learning untuk penjualan mingguan pada supermarket Walmart.

Import Library
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import datetime as dt

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor

from sklearn.metrics import mean_squared_error

from google.colab import files
uploaded = files.upload()

"""### Data Understanding"""

data = pd.read_csv('/content/Walmart.csv')

data.head()

data.info()

data.describe()

"""

* Transaksi mingguan terjadi selama periode tiga tahun (2010-2012) di 45 toko.
* Penjualan maksimum per minggu mencapai $3,8 juta
* Hari dengan temperatur terpanas mencapai suhu 100Â°F.

"""

# Split kolom Date
data['Date'] = pd.to_datetime(data['Date'])
data['year']= data['Date'].dt.year
data['month'] = data['Date'].dt.month
data['day'] = data['Date'].dt.day
data.head()

plt.figure(figsize=(12, 2))
sns.barplot(data=data, x='Store', y='Weekly_Sales')
plt.show()

"""* Toko 4 dan 20 memiliki tingkat penjualan mingguan tertinggi
* Toko 5 dan 33 memiliki tingkat penjualan mingguan terendah
"""

plt.figure(figsize=(15, 5))
sns.lineplot(data=data, x='Date', y='Weekly_Sales')
plt.xlabel('months')
plt.ylabel('Weekly Sales')
plt.title('Weekly Sales Trend')
plt.show()

# Melihat plot weekly sales disetiap bulan
plt.figure(figsize=(5, 3))
sns.barplot(data=data, x='month', y='Weekly_Sales')
plt.show()

"""Grafik menunjukkan bahwa penjualan mingguan di Walmart umumnya tetap stabil sepanjang tahun, kecuali pada bulan November dan Desember yang mengalami peningkatan penjualan yang signifikan.
Kenaikan ini kemungkinan terjadi karena musim liburan. Namun terjadi penurunan signifikan di bulan Januari, ini kemungkinan disebabkan karena event atau promo menarik telah dilaksanakan di dua bulan sebelumnya dan pelanggan telah menghabiskan uangnya di bulan November dan Desember.

### Data Preparation
"""

#Cek missing values
data.isnull().sum()

#Cek duplicated data
data.duplicated().sum()

"""* Tidak ada missing values
* Tidak ada data yang duplikat
"""

# Copy the dataest
data_copy = data.copy()

# Menghapus kolom Date karena telah di pisahkan berdasarkan year, month, day
data_copy.drop(['Date'], axis=1, inplace=True)

# Menghapus kolom Weekly_Sales untuk memisahkan variabel predictor dan target
x = data_copy.drop(['Weekly_Sales'], axis=1)
y = data_copy['Weekly_Sales']

#Feature Scaling
scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)

# Split dataset dengan rasio 80:20
X_train, X_test, y_train, y_test = train_test_split(x_scaled, y, test_size=0.2, random_state=50)

"""### Modeling


"""

def evaluate_model(model, X_train, y_train, X_test, y_test):
  model.fit(X_train, y_train)
  ytrain_pred=model.predict(X_train)
  ytest_pred=model.predict(X_test)

  train_score=np.sqrt(mean_squared_error(y_train,ytrain_pred))
  val_score=np.sqrt(mean_squared_error(y_test,ytest_pred))
  return ytest_pred, train_score, val_score

# Model Linear Regression
linear_regression = LinearRegression()
lr_pred, lr_train, lr_val = evaluate_model(linear_regression, X_train, y_train, X_test, y_test)

# Model Support Vector Regressor
sv_regressor = SVR()
svr_pred, svr_train, svr_val = evaluate_model(sv_regressor, X_train, y_train, X_test, y_test)

# Model Random Forest Regressor
randomforest_regressor = RandomForestRegressor()
rfr_pred, rfr_train, rfr_val = evaluate_model(randomforest_regressor, X_train, y_train, X_test, y_test)

"""###Evaluation"""

val_scores = {
    'LinearRegression': np.sqrt(lr_val),
    'SVR': np.sqrt(svr_val),
    'RandomForestRegressor': np.sqrt(rfr_val),
}

models = ['Linear Regression', 'Support Vector Regressor', 'Random Forest Regressor']
train_score = [lr_train, svr_train, rfr_train]
validation_score = [lr_val, svr_val, rfr_val]

# Create a DataFrame from the RSME validation results
results = pd.DataFrame(list(zip(models, train_score, validation_score)), columns=['Model', 'Train', 'Test'])
results

fig, ax = plt.subplots()
results.sort_values(by='Train', ascending=False).plot(kind='barh', x='Model', y=['Test', 'Train'], ax=ax, zorder=3)
ax.grid(zorder=0)
plt.show()

# Prediksi dengan 10 data
prediksi = X_test[:10].copy()

# Inisialisasi pred_dict dengan data aktual
pred_dict = {'y_true': y_test[:10]}

# Menambahkan prediksi untuk masing-masing model
pred_dict['prediksi_LR'] = lr_pred[:10].round(1)
pred_dict['prediksi_SVR'] = svr_pred[:10].round(1)
pred_dict['prediksi_RFR'] = rfr_pred[:10].round(1)

# Membuat DataFrame dari pred_dict
pd.DataFrame(pred_dict)